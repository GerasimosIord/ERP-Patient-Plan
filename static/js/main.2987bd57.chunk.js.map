{"version":3,"sources":["components/ExposureHierarchy.js","components/ExposureSession.js","components/DataExport.js","components/ProgressTracker.js","components/Settings.js","App.js","reportWebVitals.js","index.js"],"names":["ExposureHierarchy","_ref","erpPlan","React","createElement","className","Typography","variant","gutterBottom","categories","map","category","categoryIndex","Accordion","key","AccordionSummary","expandIcon","ExpandMoreIcon","aria-label","name","AccordionDetails","List","exposures","exposure","exposureIndex","ListItem","button","component","Link","to","description","ListItemText","primary","secondary","anxietyLevel","ExposureSession","_erpPlan$categories$c","saveErpPlan","categoryId","exposureId","useParams","navigate","useNavigate","timer","setTimer","useState","isRunning","setIsRunning","initialAnxiety","setInitialAnxiety","finalAnxiety","setFinalAnxiety","anxietyError","setAnxietyError","notes","setNotes","useEffect","interval","setInterval","prevTimer","clearInterval","validateAnxiety","value","parseInt","isNaN","Box","my","display","justifyContent","alignItems","CircularProgress","size","thickness","style","position","Math","floor","toString","padStart","Button","onClick","handleStartStop","fullWidth","marginBottom","TextField","label","type","onChange","e","target","error","helperText","margin","inputProps","min","max","multiline","rows","handleComplete","newLog","date","Date","toISOString","categoryName","exposureDescription","duration","updatedPlan","progressLogs","DataExport","formatDate","dateString","split","csvData","log","round","fileName","paragraph","CSVLink","data","filename","textDecoration","color","ProgressTracker","toLocaleDateString","undefined","year","month","day","chartData","length","Fragment","height","mb","ResponsiveContainer","width","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","domain","Tooltip","Legend","Line","stroke","strokeWidth","index","divider","mt","Settings","reminderTime","setReminderTime","openDialog","setOpenDialog","handleCloseDialog","event","InputLabelProps","shrink","step","handleSaveSettings","console","marginTop","handleReset","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","handleConfirmReset","resetPlan","autoFocus","defaultErpPlan","theme","createTheme","palette","main","background","default","App","setErpPlan","isLoading","setIsLoading","storedPlan","localStorage","getItem","JSON","parse","setItem","stringify","ThemeProvider","CssBaseline","Router","AppBar","Toolbar","marginLeft","Container","Routes","Route","path","element","Paper","sx","bottom","left","right","elevation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.2987bd57.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { List, ListItem, ListItemText, Typography, Accordion, AccordionSummary, AccordionDetails } from '@mui/material';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\n\r\nfunction ExposureHierarchy({ erpPlan }) {\r\n  return (\r\n    <div className=\"card\">\r\n      <Typography variant=\"h4\" gutterBottom>Exposure Hierarchy</Typography>\r\n      {erpPlan && erpPlan.categories.map((category, categoryIndex) => (\r\n        <Accordion key={categoryIndex}>\r\n          <AccordionSummary \r\n            expandIcon={<ExpandMoreIcon />}\r\n            aria-label={`Expand ${category.name} category`}\r\n          >\r\n            <Typography>{category.name}</Typography>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <List>\r\n              {category.exposures.map((exposure, exposureIndex) => (\r\n                <ListItem \r\n                  button \r\n                  component={Link} \r\n                  to={`/session/${categoryIndex}/${exposureIndex}`} \r\n                  key={exposureIndex}\r\n                  aria-label={`Start exposure: ${exposure.description}`}\r\n                >\r\n                  <ListItemText \r\n                    primary={exposure.description} \r\n                    secondary={`Anxiety Level: ${exposure.anxietyLevel}`} \r\n                  />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </AccordionDetails>\r\n        </Accordion>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExposureHierarchy;","import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { Typography, Button, TextField, Box, CircularProgress } from '@mui/material';\r\n\r\nfunction ExposureSession({ erpPlan, saveErpPlan }) {\r\n  const { categoryId, exposureId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [timer, setTimer] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [initialAnxiety, setInitialAnxiety] = useState('');\r\n  const [finalAnxiety, setFinalAnxiety] = useState('');\r\n  const [anxietyError, setAnxietyError] = useState('');\r\n  const [notes, setNotes] = useState('');\r\n\r\n  const exposure = erpPlan?.categories[categoryId]?.exposures[exposureId];\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n    if (isRunning) {\r\n      interval = setInterval(() => {\r\n        setTimer((prevTimer) => prevTimer + 1);\r\n      }, 1000);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [isRunning]);\r\n\r\n  const handleStartStop = () => {\r\n    setIsRunning(!isRunning);\r\n  };\r\n\r\n  const handleComplete = () => {\r\n    const newLog = {\r\n      date: new Date().toISOString(),\r\n      categoryName: erpPlan.categories[categoryId].name,\r\n      exposureDescription: exposure.description,\r\n      duration: timer,\r\n      initialAnxiety: parseInt(initialAnxiety),\r\n      finalAnxiety: parseInt(finalAnxiety),\r\n      notes: notes\r\n    };\r\n\r\n    const updatedPlan = {\r\n      ...erpPlan,\r\n      progressLogs: [...erpPlan.progressLogs, newLog]\r\n    };\r\n\r\n    saveErpPlan(updatedPlan);\r\n    navigate('/');\r\n  };\r\n\r\n  const validateAnxiety = (value) => {\r\n    const anxietyLevel = parseInt(value);\r\n    if (isNaN(anxietyLevel) || anxietyLevel < 0 || anxietyLevel > 10) {\r\n      setAnxietyError('Anxiety level must be between 0 and 10');\r\n      return false;\r\n    }\r\n    setAnxietyError('');\r\n    return true;\r\n  };\r\n\r\n  const handleInitialAnxietyChange = (e) => {\r\n    const value = e.target.value;\r\n    setInitialAnxiety(value);\r\n    validateAnxiety(value);\r\n  };\r\n\r\n  const handleFinalAnxietyChange = (e) => {\r\n    const value = e.target.value;\r\n    setFinalAnxiety(value);\r\n    validateAnxiety(value);\r\n  };\r\n\r\n  if (!exposure) {\r\n    return <Typography>Exposure not found</Typography>;\r\n  }\r\n\r\n  return (\r\n    <Box className=\"card\">\r\n      <Typography variant=\"h4\" gutterBottom>{exposure.description}</Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom>Anxiety Level: {exposure.anxietyLevel}</Typography>\r\n      \r\n      <Box my={4} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n        <CircularProgress variant=\"determinate\" value={(timer % 60) / 60 * 100} size={120} thickness={4} />\r\n        <Typography variant=\"h4\" style={{ position: 'absolute' }}>\r\n          {Math.floor(timer / 60)}:{(timer % 60).toString().padStart(2, '0')}\r\n        </Typography>\r\n      </Box>\r\n\r\n      <Button \r\n        className={isRunning ? \"button-secondary\" : \"button-primary\"}\r\n        onClick={handleStartStop}\r\n        fullWidth\r\n        style={{ marginBottom: '20px' }}\r\n      >\r\n        {isRunning ? \"Stop\" : \"Start\"}\r\n      </Button>\r\n\r\n      <TextField\r\n        label=\"Initial Anxiety (0-10)\"\r\n        type=\"number\"\r\n        value={initialAnxiety}\r\n        onChange={handleInitialAnxietyChange}\r\n        error={!!anxietyError}\r\n        helperText={anxietyError}\r\n        fullWidth\r\n        margin=\"normal\"\r\n        inputProps={{ min: 0, max: 10 }}\r\n      />\r\n\r\n      <TextField\r\n        label=\"Final Anxiety (0-10)\"\r\n        type=\"number\"\r\n        value={finalAnxiety}\r\n        onChange={handleFinalAnxietyChange}\r\n        error={!!anxietyError}\r\n        helperText={anxietyError}\r\n        fullWidth\r\n        margin=\"normal\"\r\n        inputProps={{ min: 0, max: 10 }}\r\n      />\r\n\r\n      <TextField\r\n        label=\"Notes\"\r\n        multiline\r\n        rows={4}\r\n        value={notes}\r\n        onChange={(e) => setNotes(e.target.value)}\r\n        fullWidth\r\n        margin=\"normal\"\r\n      />\r\n\r\n      <Button className=\"button-primary\" onClick={handleComplete} fullWidth>\r\n        Complete Session\r\n      </Button>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default ExposureSession;","import React from 'react';\r\nimport { Button, Box, Typography } from '@mui/material';\r\nimport { CSVLink } from 'react-csv';\r\n\r\nfunction DataExport({ erpPlan }) {\r\n  const formatDate = (dateString) => {\r\n    return new Date(dateString).toISOString().split('T')[0];\r\n  };\r\n\r\n  const prepareCSVData = () => {\r\n    const headers = [\r\n      'Date',\r\n      'Category',\r\n      'Exposure',\r\n      'Initial Anxiety',\r\n      'Final Anxiety',\r\n      'Duration (minutes)',\r\n      'Notes'\r\n    ];\r\n\r\n    const data = erpPlan.progressLogs.map(log => [\r\n      formatDate(log.date),\r\n      log.categoryName,\r\n      log.exposureDescription,\r\n      log.initialAnxiety,\r\n      log.finalAnxiety,\r\n      Math.round(log.duration / 60),\r\n      log.notes\r\n    ]);\r\n\r\n    return [headers, ...data];\r\n  };\r\n\r\n  const csvData = prepareCSVData();\r\n  const fileName = `ERP_Progress_Data_${formatDate(new Date())}.csv`;\r\n\r\n  return (\r\n    <Box className=\"card\">\r\n      <Typography variant=\"h5\" gutterBottom>Export Progress Data</Typography>\r\n      <Typography variant=\"body1\" paragraph>\r\n        Export your ERP progress data for clinical interpretation or personal record-keeping.\r\n      </Typography>\r\n      <CSVLink \r\n        data={csvData} \r\n        filename={fileName}\r\n        className=\"button-primary\"\r\n        style={{ textDecoration: 'none' }}\r\n      >\r\n        <Button variant=\"contained\" color=\"primary\">\r\n          Download CSV\r\n        </Button>\r\n      </CSVLink>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default DataExport;","import React from 'react';\r\nimport { Typography, List, ListItem, ListItemText, Box } from '@mui/material';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport DataExport from './DataExport';\r\n\r\nfunction ProgressTracker({ erpPlan }) {\r\n  const formatDate = (dateString) => {\r\n    const options = { year: 'numeric', month: 'short', day: 'numeric' };\r\n    return new Date(dateString).toLocaleDateString(undefined, options);\r\n  };\r\n\r\n  const chartData = erpPlan?.progressLogs.map(log => ({\r\n    date: formatDate(log.date),\r\n    initialAnxiety: log.initialAnxiety,\r\n    finalAnxiety: log.finalAnxiety\r\n  }));\r\n\r\n  return (\r\n    <Box className=\"card\">\r\n      <Typography variant=\"h4\" gutterBottom>Progress Tracker</Typography>\r\n      \r\n      {erpPlan?.progressLogs.length > 0 ? (\r\n        <>\r\n          <Box height={400} mb={4}>\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n              <LineChart data={chartData}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"date\" />\r\n                <YAxis domain={[0, 10]} />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Line type=\"monotone\" dataKey=\"initialAnxiety\" stroke=\"#8884d8\" name=\"Initial Anxiety\" strokeWidth={2} />\r\n                <Line type=\"monotone\" dataKey=\"finalAnxiety\" stroke=\"#82ca9d\" name=\"Final Anxiety\" strokeWidth={2} />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          </Box>\r\n          \r\n          <List>\r\n            {erpPlan.progressLogs.map((log, index) => (\r\n              <ListItem key={index} divider>\r\n                <ListItemText\r\n                  primary={`${log.categoryName}: ${log.exposureDescription}`}\r\n                  secondary={`Date: ${formatDate(log.date)}, Duration: ${Math.floor(log.duration / 60)}:${(log.duration % 60).toString().padStart(2, '0')}, Initial Anxiety: ${log.initialAnxiety}, Final Anxiety: ${log.finalAnxiety}`}\r\n                />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n\r\n          <Box mt={4}>\r\n            <DataExport erpPlan={erpPlan} />\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Typography>No progress logs yet. Complete some exposures to see your progress!</Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default ProgressTracker;","import React, { useState } from 'react';\r\nimport { Typography, Button, TextField, Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@mui/material';\r\n\r\nfunction Settings({ erpPlan, saveErpPlan }) {\r\n  const [reminderTime, setReminderTime] = useState('09:00');\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n\r\n  const handleReminderChange = (event) => {\r\n    setReminderTime(event.target.value);\r\n  };\r\n\r\n  const handleSaveSettings = () => {\r\n    // Here you would typically save the reminder time to the user's settings\r\n    console.log('Reminder time saved:', reminderTime);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleConfirmReset = () => {\r\n    const resetPlan = {\r\n      ...erpPlan,\r\n      progressLogs: []\r\n    };\r\n    saveErpPlan(resetPlan);\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"h4\" gutterBottom>Settings</Typography>\r\n      \r\n      <TextField\r\n        label=\"Daily Reminder Time\"\r\n        type=\"time\"\r\n        value={reminderTime}\r\n        onChange={handleReminderChange}\r\n        InputLabelProps={{\r\n          shrink: true,\r\n        }}\r\n        inputProps={{\r\n          step: 300, // 5 min\r\n        }}\r\n        fullWidth\r\n        margin=\"normal\"\r\n      />\r\n      \r\n      <Button \r\n        variant=\"contained\" \r\n        color=\"primary\" \r\n        onClick={handleSaveSettings}\r\n        fullWidth\r\n        style={{ marginTop: '20px' }}\r\n      >\r\n        Save Settings\r\n      </Button>\r\n\r\n      <Button \r\n        variant=\"contained\" \r\n        color=\"secondary\" \r\n        onClick={handleReset}\r\n        fullWidth\r\n        style={{ marginTop: '20px' }}\r\n      >\r\n        Reset All Progress\r\n      </Button>\r\n\r\n      <Dialog\r\n        open={openDialog}\r\n        onClose={handleCloseDialog}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Reset Progress?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            Are you sure you want to reset all progress? This action cannot be undone.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleConfirmReset} color=\"secondary\" autoFocus>\r\n            Confirm Reset\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Settings;","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport { AppBar, Toolbar, Typography, Container, List, ListItem, ListItemText, Paper, Box, CircularProgress, Button } from '@mui/material';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport { Accordion, AccordionSummary, AccordionDetails } from '@mui/material';\n\nimport ExposureHierarchy from './components/ExposureHierarchy';\nimport ExposureSession from './components/ExposureSession';\nimport ProgressTracker from './components/ProgressTracker';\nimport Settings from './components/Settings';\n\nconst defaultErpPlan = {\n  categories: [\n    {\n      name: \"Door Locking (Checking OCD)\",\n      exposures: [\n        { description: \"Leave a room without checking the door\", anxietyLevel: \"low\" },\n        { description: \"Lock the door once and walk away immediately\", anxietyLevel: \"moderate\" },\n        { description: \"Lock the door and don't check it for increasing periods of time\", anxietyLevel: \"high\" },\n        { description: \"Go to sleep without checking doors\", anxietyLevel: \"very high\" }\n      ]\n    },\n    {\n      name: \"Studying Perfectionism\",\n      exposures: [\n        { description: \"Study for 30 minutes using a non-optimal method\", anxietyLevel: \"low\" },\n        { description: \"Submit an assignment without triple-checking it\", anxietyLevel: \"moderate\" },\n        { description: \"Attend a class without pre-reading the material\", anxietyLevel: \"high\" },\n        { description: \"Take a test without over-preparing\", anxietyLevel: \"very high\" }\n      ]\n    },\n    {\n      name: \"Moral Judgments and Reactions to Disagreement\",\n      exposures: [\n        { description: \"Read an opinion piece that slightly disagrees with your views\", anxietyLevel: \"low\" },\n        { description: \"Have a conversation with someone whose values differ from yours on a minor issue\", anxietyLevel: \"moderate\" },\n        { description: \"Engage in a discussion about a topic where you have strong opinions, allowing others to disagree\", anxietyLevel: \"high\" },\n        { description: \"Attend a debate or forum where views opposite to yours are presented\", anxietyLevel: \"very high\" },\n        { description: \"Write out arguments supporting a view you strongly disagree with\", anxietyLevel: \"very high\" }\n      ]\n    },\n    {\n      name: \"Retroactive Jealousy\",\n      exposures: [\n        { description: \"Look at a photo of your girlfriend with male friends\", anxietyLevel: \"low\" },\n        { description: \"Discuss a neutral topic about your girlfriend's past\", anxietyLevel: \"moderate\" },\n        { description: \"Have your girlfriend tell you about a past flirtatious interaction\", anxietyLevel: \"high\" },\n        { description: \"Imagine your girlfriend in a romantic situation with a past partner\", anxietyLevel: \"very high\" }\n      ]\n    },\n    {\n      name: \"Compulsion for Constant Productivity\",\n      exposures: [\n        { description: \"Sit quietly for 5 minutes without engaging in any productive activity\", anxietyLevel: \"low\" },\n        { description: \"Take a 15-minute break between study sessions without researching or being productive\", anxietyLevel: \"moderate\" },\n        { description: \"Spend an hour engaging in a purely leisurely activity with no educational value\", anxietyLevel: \"high\" },\n        { description: \"Take a full day off from studying or researching, focusing on relaxation or non-productive activities\", anxietyLevel: \"very high\" }\n      ]\n    }\n  ],\n  progressLogs: []\n};\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#3f51b5',\n    },\n    secondary: {\n      main: '#f50057',\n    },\n    background: {\n      default: '#f5f5f5',\n    },\n  },\n});\n\nfunction App() {\n  const [erpPlan, setErpPlan] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const storedPlan = localStorage.getItem('erpPlan');\n    if (storedPlan) {\n      setErpPlan(JSON.parse(storedPlan));\n    } else {\n      setErpPlan(defaultErpPlan);\n    }\n    setIsLoading(false);\n  }, []);\n\n  const saveErpPlan = (updatedPlan) => {\n    setErpPlan(updatedPlan);\n    localStorage.setItem('erpPlan', JSON.stringify(updatedPlan));\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Router>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\">OCD ERP Plan</Typography>\n            <nav>\n              <Link to=\"/\" style={{ color: 'white', marginLeft: 20 }}>Hierarchy</Link>\n              <Link to=\"/progress\" style={{ color: 'white', marginLeft: 20 }}>Progress</Link>\n              <Link to=\"/settings\" style={{ color: 'white', marginLeft: 20 }}>Settings</Link>\n            </nav>\n          </Toolbar>\n        </AppBar>\n        <Container>\n          <Routes>\n            <Route path=\"/\" element={<ExposureHierarchy erpPlan={erpPlan} />} />\n            <Route path=\"/session/:categoryId/:exposureId\" element={<ExposureSession erpPlan={erpPlan} saveErpPlan={saveErpPlan} />} />\n            <Route path=\"/progress\" element={<ProgressTracker erpPlan={erpPlan} />} />\n            <Route path=\"/settings\" element={<Settings erpPlan={erpPlan} saveErpPlan={saveErpPlan} />} />\n          </Routes>\n        </Container>\n        <Paper sx={{ position: 'fixed', bottom: 0, left: 0, right: 0 }} elevation={3}>\n          <List component=\"nav\">\n            <ListItem button component={Link} to=\"/\">\n              <ListItemText primary=\"Hierarchy\" />\n            </ListItem>\n            <ListItem button component={Link} to=\"/progress\">\n              <ListItemText primary=\"Progress\" />\n            </ListItem>\n            <ListItem button component={Link} to=\"/settings\">\n              <ListItemText primary=\"Settings\" />\n            </ListItem>\n          </List>\n        </Paper>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\nreportWebVitals();"],"sourceRoot":""}